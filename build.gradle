plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Java 21をターゲットに設定
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    reobf = false
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    mavenCentral()
    flatDir {
        dir 'libs'
    }
    maven {
        name = 'GeckoLib'
        url  = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
}

def ros2JavaPath = System.getenv("ROS2JAVA_INSTALL_PATH")

if (ros2JavaPath == null) {
    throw new GradleException("環境変数 ROS2JAVA_INSTALL_PATH が設定されていません。")
}

// パッケージ名一覧（必要なものをここに列挙）
def ros2Packages = [
    "rcljava",
    "rcljava_common"
]

def ros2Messages =[
    "geometry_msgs",
    "std_msgs",
    "builtin_interfaces",
    "sensor_msgs",
    "tf2_msgs",
    "simulation_interfaces",
    "minecraft_msgs"
]

// JARファイルパスを動的に収集
def ros2PackageJars = ros2Packages.collect { pkg ->
    file("${ros2JavaPath}/${pkg}/share/${pkg}/java/${pkg}.jar")
}

def ros2MessageJars = ros2Messages.collect { msg ->
    file("${ros2JavaPath}/${msg}/share/${msg}/java/${msg}_messages.jar")
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // ROS 2 Java 依存関係
    ros2PackageJars.each { jar ->
        implementation files(jar)
    }

    ros2MessageJars.each { jar ->
        implementation files(jar)
    }

    // 互換性のための設定
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') {
        version { strictly '5.0.4' }
    }
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-1.20.6:4.5.4.1")
}

shadowJar {
    archiveClassifier.set('')
    configurations = [project.configurations.runtimeClasspath]
}


tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version       : minecraft_version,
            minecraft_version_range : minecraft_version_range,
            forge_version           : forge_version,
            forge_version_range     : forge_version_range,
            loader_version_range    : loader_version_range,
            mod_id                  : mod_id,
            mod_name                : mod_name,
            mod_license             : mod_license,
            mod_version             : mod_version,
            mod_authors             : mod_authors,
            mod_description         : mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Specification-Title'     : mod_id,
            'Specification-Vendor'    : mod_authors,
            'Specification-Version'   : '1',
            'Implementation-Title'    : project.name,
            'Implementation-Version'  : project.jar.archiveVersion,
            'Implementation-Vendor'   : mod_authors
        ])
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

eclipse {
    synchronizationTasks 'genEclipseRuns'
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}